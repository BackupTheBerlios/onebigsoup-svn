$set title: Local Names Namespace Description Specification v1.2

$name LNNDS
$name LNNDS v1.2
$name Local Names Namespace Description Specification
$name Local Names Namespace Description Specification version 1.2
$name spec

$name Background
=== Background ===

'''Before you read this document,''' make sure that you [[about]
understand the main ideas of Local Names.]

This document is the Local Names Namespace Description Specification,
version 1.2. It is abbreviated "LNNDS v1.2". This document obsoletes 
prior LNNDS.

This specification is maintained by [[Lion:my site] Lion Kimbro,] who is
available by e-mail at [[mailto:lion@speakeasy.org] lion@speakeasy.org.]

$name News and Contacts
=== News and Contacts ===

Major changes, releases, and news updates are posted to [[news] the
Local Names website news page,] and [[news RSS] accompanying RSS feed.]
Posts are made roughly once every 6-12 months.

Ongoing development is presently (2005-06-16) coordinated on [[Lion:my
blog] Lion Kimbro's blog,] which has [[Lion:my RSS]an RSS 2.0 news
feed.] Relevant posts are made roughly once every 3-9 months.

Additional contact methods:

The project presently keeps '''no mailing lists.''' Either write on
Lion Kimbro's blog, write on [[CommunityWiki] CommunityWiki,] call
Lion's cell phone, or otherwise get in contact with Lion Kimbro or a
member of the [[One Big Soup]] effort.

Lion Kimbro's contact information is on [[Lion:my site] his web
site.]

"One Big Soup" was the name of the super-project that gave rise to Local
Names. The goal of One Big Soup was to develop Internet public
communication systems by tying together existing Internet technologies
with new protocols. Read [[CommunityWiki:OneBigSoup]] and [[A Manifesto
for Collaborative Tools]] for more information.

$name Encoding
== Encoding ==

Local Names namespace descriptions are encoded with:

#LITERAL
<p class="example">Content-type: text/plain; charset=UTF-8</p>
#LITERAL

Apache 2.0 can serve text files with these settings with the following
directive:

#LITERAL
<p class="example">AddType "text/plain; charset=UTF-8" txt</p>
#LITERAL

$name Syntax
== Syntax ==

#CODE
Syntax

  <namespace_description> ::= { <line> }

  <line>    ::= <newline> |
                <comment> <newline> |
                <record> <newline>

  <comment> ::= "#" { <comment-character> }
  <record>  ::= <record_type> <one_space> <column> <one_space> <column>
  <column>  ::= "." |
                <quotation-mark> { <column-character> } <quotation-mark>

  <record_type> ::= "."       |
                    "LN"      |
                    "NS"      |
                    "X"       |
                    "PATTERN"

  <one_space>         : ASCII space (32)
  <quotation-mark>    : ASCII quotation mark (34,) like so: "
  <newline>           : ASCII NL, CR, FF
  <comment-character> : any UTF-8 character, save NL, CR, FF
  <column-character>  : any UTF-8 character, escaping the following:
                        Newline: \n
                        Quote: \"
                        Slash: \\
                        A slash followed by anything else
                        SHOULD generate an error.
#CODE

$name Syntax Key
== Syntax Key ==

#LITERAL
<table border="1">
  <tr>
    <td> &lt;blah-blah&gt; </td>
    <td> non-terminal symbol </td>
  </tr>
  <tr>
    <td> "blah-blah" </td>
    <td> literal text, as ASCII, without quotes around it </td>
  </tr>
  <tr>
    <td> { blah blah } </td>
    <td> repetition, zero or more "blah blahs" </td>
  </tr>
</table>
#LITERAL

$name Regarding Unicode Whitespace
=== Regarding Newlines ===

Accept 0D, 0A, or 0D0A as line breaks.

$name Syntax Explanation
== Syntax Explanation ==

Lines are one of the following three forms: Blank, comment, or record.

'''[[blank line] Blank lines]''' are lines consisting of nothing but
white space.

'''[[comment line] Comment lines]''' start with a hash (#).

'''[[record] Records]''' are composed of three [[column] columns.]

The first column is the [[record type] record type,] and the meaning of
the remaining two columns depends on the first column.

The first columnm, the record type, can read either [[LN] "LN,"] [[NS]
"NS,"] [[X] "X,"] or [[PATTERN] "PATTERN."] (No quotation marks, no
commas, no periods. The first column can also be ''just a period.'' A
period means a repetition of the previously used record type.

The second and third columns can be:

* a period ("."), no quotation marks around it, signifying a
  repetition of the previous value used in the column,
* quotation-mark-encased text, with newlines, quotes, and slashes,
  escaped with "\n", "\"", or "\\",

That is, you can use a period in any column.

Periods never have quotation marks around them.  If you are in the
first column, you never use quotation marks. Quotation marks are found
around the second or third column if you aren't using a period.

''NOTE: In previous versions of the spec, you could opt to not have
quotes around the second and third columns. No longer. Nobody ever
used it, save for X records.''

This concludes the description of the syntax.

$name Semantics Explanation
== Semantics Explanation ==

#LITERAL
<p class="foobar">LN &quot;(name)&quot; &quot;(URI)&quot;</p>
#LITERAL

This means to bind the [[name]] to the [[URL] URI.]

#LITERAL
<p class="foobar">NS &quot;(link key)&quot; &quot;(URI)&quot;</p>
#LITERAL

This means to link the namespace to a target namespace (described at the
[[URL] URI.]) The target namespace is referred to by a convenient name,
the [[link key] "link key."]

#LITERAL
<p class="foobar">PATTERN &quot;(pattern key)&quot; &quot;(URI template)&quot;</p>
#LITERAL

This means to create a link to a [[URI template]].

The URI template is referred to by a convenient name, the [[pattern key]
"pattern key."]

Replacements in the URI template are made by identifiers: "$NAME" and
"$ARGn" where n is a number, starting from 1. "$NAME" is equivalent to
"$ARG1".

Resolution of the pattern depends upon the query style (see the
[[Local Names XML-RPC Query Interface]] for details,) but basically,
if a pattern is named in the query path, then the remainder of the
path is interpreted as pattern arguments, and the final URI is created
from that.

Examples:

#LITERAL
<p class="example">Query path:     foo, bar
Pattern record:  PATTERN &quot;foo&quot; &quot;http://foo/$NAME&quot;
Result: &quot;http://foo/bar&quot;</p>
#LITERAL

#LITERAL
<p class="example">Query path:     foo, bar, baz
Pattern record:  PATTERN &quot;foo&quot; &quot;http://foo/$ARG1/$ARG2&quot;
Result:   http://foo/bar/baz</p>
#LITERAL

#LITERAL
<p class="foobar">X &quot;(key)&quot; &quot;(value)&quot;</p>
#LITERAL

This means to set some [[extension data]] for the immediate namespace.

A namespace description interpreter should accept any key-value pair
given in X records.

$name X Records
== X Records ==

These are standard X records, recommended by this spec for
use. Everything is optional, but X "VERSION" is strongly recommended.

#LITERAL
<p class="example">Text like this is an example.</p>
#LITERAL

#LITERAL
<p class="foobar">
    X &quot;VERSION&quot; &quot;1.2&quot;
</p>
#LITERAL

As is. ''Exactly'' as seen above. ''Exactly.''

$REM ---------- Laazy lazy lazy lazy. ----------
#LITERAL

<p class="foobar">
    X &quot;AUTHOR&quot; &quot;(name)&quot;
</p>
<p>
    The description's author's name.
</p>
<p class="example">X &quot;AUTHOR&quot; &quot;Lion Kimbro&quot;</p>

<p class="foobar">
    X &quot;AUTHOR-FOAF&quot; &quot;(URI)&quot;
</p>
<p>
    A link to the description's author's FOAF file.
</p>
<p class="example">X &quot;AUTHOR-FOAF&quot; &quot;http://www.speakeasy.org/~lion/foaf.rdf&quot;</p>

<p class="foobar">
    X &quot;LAST-MODIFIED&quot; &quot;(ISO-8601)&quot;
</p>
<p>
    The date the namespace description was last changed.
</p>
<p class="example">X &quot;LAST-MODIFIED&quot; &quot;2005-01-28&quot;</p>

<p class="foobar">
    X &quot;PREFERRED-NAME&quot; &quot;(name)&quot;
</p>
<p>
    A preferred short name for the namespace.
    Useful if you are automatically generating an
    NS record, given just a URL of a namespace description.
</p>
<p class="example">X &quot;PREFERRED-NAME&quot; &quot;The Prophet, by Gibran&quot;</p>

<p class="foobar">
    X &quot;PREFERRED-QUERY-SERVER&quot; &quot;(url)&quot;
</p>
#LITERAL

The URL of a [[Local Names Query Server]] that usually keeps this
namespace description (and perhaps it's neighbors) cached.

#LITERAL
<p class="example">X &quot;PREFERRED-QUERY-SERVER&quot; &quot;http://example.net/lnquery/&quot;</p>

<p class="foobar">
    X &quot;AUTHORITATIVE-STORE-SERVER&quot; &quot;(url)&quot;
</p>

<p class="foobar">
    X &quot;AUTHORITATIVE-STORE-NAMESPACE&quot; &quot;(name)&quot;
</p>

<p class="foobar">
    X &quot;AUTHORITATIVE-STORE-PASSWORD&quot; &quot;(password)&quot;
</p>

#LITERAL

These three X records tell how to edit the namespace via the [[Local Names XML-RPC Store Interface]].

All, some, or none of these 3 X records can be defined.

AUTHORITATIVE-STORE-SERVER tells the URL of the store interface.

AUTHORITATIVE-STORE-NAMESPACES tells the name of the namespace, as
understood by the store interface.

AUTHORITATIVE-STORE-PASSWORD tells the password to use when editing
the namespace via the store interface. Remember, you don't have to
list this.

If a namespace or password are not given, an interpreter will likely
default to default namespace "default" and null password "password",
as described in the [[Local Names XML-RPC Store Interface]
specification.]

#LITERAL
<p class="example">X &quot;AUTHORITATIVE-STORE-SERVER&quot; &quot;http://example.net/lnquery/&quot;</p>
<p class="example">X &quot;AUTHORITATIVE-STORE-NAMESPACE&quot; &quot;robotics&quot;</p>
<p class="example">X &quot;AUTHORITATIVE-STORE-PASSWORD&quot; &quot;xyzzy&quot;</p>

<p class="foobar">
    X &quot;FINAL&quot; &quot;(URI-pattern)&quot;
</p>
<p>
    <i>(Notes below.)</i>
</p>

<p class="example">X &quot;FINAL&quot; &quot;The Prophet, by Gibran&quot;</p>

#LITERAL
$name X FINAL
=== X "FINAL" ===
#LITERAL

<p>This standard requires the special treatment
   of X &quot;FINAL&quot;.</p>

<p>If a name is looked up, and no LN entry is found
    for the name, but there is an X &quot;FINAL&quot; (URI pattern)
    entry found, then the name is fitted to the pattern,
    and that is the final URI.</p>

<p> The pattern can include the text "$NAME".
    Wherever "$NAME" appears in the pattern, "$NAME"
    is replaced with the name that is being fit to the
    pattern.</p>

<p>
    Examples:
</p>

<p class="example">Name:     bar
Pattern:  http://foo/$NAME
Result:   http://foo/bar</p>

<p class="example">Name:     bar
Pattern:  http://foo/$NAME$NAME--$NAME
Result:   http://foo/barbar--bar</p>

<p>
  A Local Names resolver MUST correctly handle
  and interpret "X FINAL."
</p>

#LITERAL


$name Note on Relative URLs
=== Note on Relative URLs ===

Wherever you can put a URL,] you can also put a
[[relative URL] relative URL.] The URL is specified relative to the last
URL path element leading to the [[namespace description]] itself.


#LITERAL
<h3><a name="redefinition">Redefinition</a></h3>

<p class="question">
  Q. Can LN, NS, and PATTERN records share the same name?
</p>

<p class="answer">
  A. An LN record can reuse a name also used by an NS or
     PATTERN record. But NS and PATTERN records cannot
     share names with each other.
</p>
<p class="answer">
     This is because an LN record is used for looking up
     individual names, but both PATTERN and NS records
     are used for looking up namespaces.
</p>
<p class="answer">
     Recall that a PATTERN simulates a namespace, so
     the name of a PATTERN will collide with the name
     of an NS.
</p>

<p class="question">
  Q. What happens if there is an LN redefinition,
     or an NS/PATTERN redefinition?
</p>

<p class="answer"> 
  A. Use the first value given. Log an error.
</p>

<p class="question">
  Q. How do X "AUTHOR" and X "AUTHOR-FOAF" relate?
</p>

<p class="answer">
  A. AUTHOR is used to name authors. AUTHOR-FOAF is used to link to
  author FOAF descriptions. They do not refer to one another. If you
  want to list three authors by name, and link to three other authors
  by FOAF, or perhaps one of the authors that is explicitely named
  also has a FOAF link- it does not matter, and there is no
  specification about how they relate. The interpreter cannot know,
  save if it notices that the FOAF description features says that a
  person's name is the same as an AUTHOR field says.
</p>

<p class="answer">
  Try not to overthink this one. If all you have are names of authors,
  just list the names of authors. If all you have are FOAF links,
  include the FOAF links. If you like, list both names and FOAF links.
</p>

<p class="question">
  Q. What happens if an X record is redefined?
</p>

<p class="answer">
  A. X records are a special case; X records
     line up into a list. The first entry to appear
     in the text file is the first entry to appear
     in the list.
</p>
<p class="answer">
     This is so that meta-data requiring lists
     can exist. (Albeit somewhat clumbsy.)
</p>
<p class="answer">
     In particular, X &quot;PREFERRED-NAME&quot; could be
     used repeatedly to list multiple possibilities,
     in case a preferred name is already taken.
</p>
<p class="answer">
     X &quot;AUTHOR&quot; may be used to name multiple authors.
</p>
<p class="answer">
     But something like X &quot;VERSION&quot; should never
     be repeated. It is syntactically okay,
     but it shouldn't be done.
</p>
<p class="answer">
     The same goes for "DATE-CHANGED."
</p>

<h3><a name="metatags">Meta Tags</a></h3>

<p>If you wish to advertise a namespace from a web page, place the following in the head of your HTML document:</p>

<blockquote>&lt;link rel="meta" type="text/plain" title="localnamespace" href="..." /&gt;</blockquote>

<p>example:</p>

<p class="example" style="width: 150%;">&lt;link rel="meta" type="text/plain" title="localnamespace" href="http://ln.taoriver.net/localnames.txt" /&gt;</p>
#LITERAL
